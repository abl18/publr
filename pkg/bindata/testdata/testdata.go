// Copyright 2019 Publr Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-bindata.
// sources:
// data/testdata/posts.sql
// data/testdata/sites.sql
// data/testdata/users.sql
// DO NOT EDIT!

package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTestdataPostsSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x51\x4f\xe2\x4e\x14\xc5\xdf\xf9\x14\x27\x7d\xd2\x84\x16\xff\xbe\xfd\x17\x63\xd2\x45\xcc\x36\xab\xc5\xd0\xaa\xf1\x49\x86\xf6\xd2\xde\xa4\x9d\x99\x9d\x99\x2e\xf6\xdb\x6f\xa6\x60\x02\x62\xf6\xcd\xe5\x81\x86\x33\x87\x73\x7e\x73\x6f\x1a\x86\x98\x29\xdd\x1b\xae\x6a\x87\xcb\x8b\xff\xfe\xc7\x43\xb7\x6e\x0c\xe2\xce\xd5\xca\xd8\x68\x14\x86\xa3\x30\xc4\x1d\x17\x24\x2d\x95\xe8\x64\x49\x06\xae\x26\xc4\x5a\x14\x35\xbd\x9f\x8c\xf1\x44\xc6\xb2\x92\xb8\x8c\x2e\x70\xe6\x0d\xc1\xfe\x28\x38\x9f\xfa\x88\x5e\x75\x68\x45\x0f\xa9\x1c\x3a\x4b\x70\x35\x5b\x6c\xb8\x21\xd0\x5b\x41\xda\x81\x25\x0a\xd5\xea\x86\x85\x2c\x08\x5b\x76\xf5\xd0\xb3\x4f\xf1\x24\x78\xd9\x67\xa8\xb5\x13\x2c\x21\x50\x28\xdd\x43\x6d\x0e\x8d\x10\x6e\x0f\xed\x3f\xb5\x73\xfa\xdb\x64\xb2\xdd\x6e\x23\x31\x00\x47\xca\x54\x93\x66\x67\xb5\x93\xbb\x64\x36\x4f\xb3\x79\x78\x19\x5d\xec\xff\xf4\x28\x1b\xb2\x16\x86\x7e\x75\x6c\xa8\xc4\xba\x87\xd0\xba\xe1\x42\xac\x1b\x42\x23\xb6\x50\x06\xa2\x32\x44\x25\x9c\xf2\xd0\x5b\xc3\x8e\x65\x35\x86\x55\x1b\xb7\x15\x86\x7c\x4c\xc9\xd6\x19\x5e\x77\xee\x68\x66\xef\x88\x6c\x8f\x0c\x4a\x42\x48\x04\x71\x86\x24\x0b\xf0\x3d\xce\x92\x6c\xec\x43\x9e\x93\xfc\xc7\xe2\x31\xc7\x73\xbc\x5c\xc6\x69\x9e\xcc\x33\x2c\x96\x98\x2d\xd2\x9b\x24\x4f\x16\x69\x86\xc5\x2d\xe2\xf4\x05\x3f\x93\xf4\x66\x0c\x62\x57\x93\x01\xbd\x69\xe3\x6f\xa0\x0c\xd8\x4f\x93\xca\x61\x74\x19\xd1\x11\xc2\x46\xed\x90\xac\xa6\x82\x37\x5c\xa0\x11\xb2\xea\x44\x45\xa8\xd4\x6f\x32\x92\x65\x05\x4d\xa6\x65\xeb\xb7\x6a\x21\x64\xe9\x63\x1a\x6e\xd9\x09\x37\x48\x27\xf7\x8a\x46\xa3\x2c\x8f\x97\x39\xf2\x65\x9c\x66\xf1\xcc\x43\x4e\x47\xa3\x24\xcd\xe6\xcb\x1c\x49\x9a\x2f\xb0\xd2\xca\x3a\xbb\xc2\xd9\xca\xb1\x6b\x68\x35\xc6\xca\x36\x5d\xe5\x9f\xb5\x6b\x1b\xff\xe4\x56\x54\xc3\x81\xee\xd6\x0d\xdb\x9a\xca\xd5\x39\x9e\xe2\xbb\xc7\x79\x86\xb3\xe0\xbe\xc7\x2d\x1b\xeb\xf0\xa0\xac\x0b\xc6\x08\xda\x3e\xdc\x78\x21\x1c\x92\xbd\x72\xa5\xaf\x8f\x5c\x57\x13\x7d\xed\xf5\x21\x38\xd2\xb2\x0a\xc6\x70\xa6\xa3\xf3\xe9\x29\xda\xab\x65\x47\x03\xdf\xee\xd7\x9e\xcd\xab\xaf\xa5\x6a\x05\xcb\x43\x98\xd3\xee\xb6\x1f\x02\x22\xff\x1d\x7c\x5a\x20\x76\x6f\xd6\x49\xc5\x4e\x7f\xed\x2c\x19\x29\x5a\xfa\x7b\xcd\xce\x5c\x52\xab\x7c\xc9\x68\xb6\xb8\xbf\x4f\xf2\xe9\xbf\x19\x7f\x46\x85\x92\xe5\xe1\xfc\xed\xa0\x7c\x5c\xc0\x81\xef\x4b\x37\xf0\xb1\xfd\xab\x56\xf0\xb1\xe7\xf3\x1d\xfc\x09\x00\x00\xff\xff\xa6\x2f\xb5\x29\x51\x05\x00\x00")

func dataTestdataPostsSQLBytes() ([]byte, error) {
	return bindataRead(
		_dataTestdataPostsSQL,
		"data/testdata/posts.sql",
	)
}

func dataTestdataPostsSQL() (*asset, error) {
	bytes, err := dataTestdataPostsSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/testdata/posts.sql", size: 1361, mode: os.FileMode(420), modTime: time.Unix(1557706033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTestdataSitesSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x41\x6f\x9b\x4c\x10\x86\xef\xfe\x15\xaf\x38\x25\x12\x60\x7f\xbe\x7d\xed\x89\x3a\xae\x8a\xea\x42\x65\x70\xa2\xdc\x58\xc3\x18\x46\x82\x5d\xba\x3b\x94\xf0\xef\xab\x75\x1c\xa9\x56\x39\x70\xd8\x79\xe7\xd9\x67\x66\xa3\x08\x3b\x33\x2e\x96\xdb\x4e\xb0\xdd\xfc\xf7\x3f\x7e\x4e\xe7\xde\x22\x99\xa4\x33\xd6\xc5\xab\x28\x5a\x45\x11\x0e\x5c\x93\x76\xd4\x60\xd2\x0d\x59\x48\x47\x48\x46\x55\x77\xf4\x51\x09\xf1\x4c\xd6\xb1\xd1\xd8\xc6\x1b\x3c\xf8\x40\x70\x2b\x05\x8f\x9f\x3d\x62\x31\x13\x06\xb5\x40\x1b\xc1\xe4\x08\xd2\xb1\xc3\x85\x7b\x02\xbd\xd5\x34\x0a\x58\xa3\x36\xc3\xd8\xb3\xd2\x35\x61\x66\xe9\xae\xf7\xdc\x28\xde\x04\xaf\x37\x86\x39\x8b\x62\x0d\x85\xda\x8c\x0b\xcc\xe5\xef\x20\x94\xdc\xa4\xfd\xd7\x89\x8c\x9f\xd6\xeb\x79\x9e\x63\x75\x15\x8e\x8d\x6d\xd7\xfd\x7b\xd4\xad\x0f\xe9\x6e\x9f\x15\xfb\x68\x1b\x6f\x6e\x4d\x27\xdd\x93\x73\xb0\xf4\x6b\x62\x4b\x0d\xce\x0b\xd4\x38\xf6\x5c\xab\x73\x4f\xe8\xd5\x0c\x63\xa1\x5a\x4b\xd4\x40\x8c\x97\x9e\x2d\x0b\xeb\x36\x84\x33\x17\x99\x95\x25\x8f\x69\xd8\x89\xe5\xf3\x24\x77\x3b\xfb\x50\x64\x77\x17\x30\x1a\x4a\x23\x48\x0a\xa4\x45\x80\x2f\x49\x91\x16\xa1\x87\xbc\xa4\xe5\xb7\xfc\x54\xe2\x25\x39\x1e\x93\xac\x4c\xf7\x05\xf2\x23\x76\x79\xf6\x94\x96\x69\x9e\x15\xc8\xbf\x22\xc9\x5e\xf1\x3d\xcd\x9e\x42\x10\x4b\x47\x16\xf4\x36\x5a\x3f\x81\xb1\x60\xbf\x4d\x6a\xae\xab\x2b\x88\xee\x14\x2e\xe6\x5d\xc9\x8d\x54\xf3\x85\x6b\xf4\x4a\xb7\x93\x6a\x09\xad\xf9\x4d\x56\xb3\x6e\x31\x92\x1d\xd8\xf9\x57\x75\x50\xba\xf1\x98\x9e\x07\x16\x25\xd7\xa3\x7f\xe6\x8a\x57\xab\x34\x2b\xf6\xc7\x12\x69\x56\xe6\xa8\x1c\x0b\xb9\x0a\x0f\x95\xb0\xf4\x54\x85\xa8\x1a\x33\x28\xd6\xd5\x23\x9e\x93\xc3\x69\x5f\xe0\x21\xf8\xb1\xa0\xf0\xb1\x20\x44\x30\x2c\xd7\x8e\xd8\xff\x83\xc7\x3f\x01\x00\x00\xff\xff\xe2\x2d\xe8\x0f\x9b\x02\x00\x00")

func dataTestdataSitesSQLBytes() ([]byte, error) {
	return bindataRead(
		_dataTestdataSitesSQL,
		"data/testdata/sites.sql",
	)
}

func dataTestdataSitesSQL() (*asset, error) {
	bytes, err := dataTestdataSitesSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/testdata/sites.sql", size: 667, mode: os.FileMode(420), modTime: time.Unix(1557669260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTestdataUsersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcf\x6f\xa3\x38\x14\xbe\xe7\xaf\xf8\x94\x53\x2b\x11\x92\x76\x4f\xbb\xb9\x2c\x9b\x66\x35\x68\x5a\x18\x05\xd2\xaa\xa7\xc6\x81\x17\x78\x92\xb1\x19\xdb\x0c\xcd\x7f\x3f\x32\x49\x3a\x4d\xa7\x73\x6b\x39\x80\x9f\xbf\xc7\xf7\xe3\x59\x9e\x4c\xb0\xd0\xed\xde\x70\x55\x3b\x5c\xcf\xae\xfe\xc6\xb7\x6e\x2b\x0d\xa2\xce\xd5\xda\xd8\x70\x34\x99\x8c\x26\x13\xdc\x72\x41\xca\x52\x89\x4e\x95\x64\xe0\x6a\x42\xd4\x8a\xa2\xa6\x13\x12\xe0\x9e\x8c\x65\xad\x70\x1d\xce\x70\xe1\x1b\xc6\x47\x68\x7c\x39\xf7\x14\x7b\xdd\xa1\x11\x7b\x28\xed\xd0\x59\x82\xab\xd9\x62\xc7\x92\x40\xcf\x05\xb5\x0e\xac\x50\xe8\xa6\x95\x2c\x54\x41\xe8\xd9\xd5\x83\xce\x91\xc5\x3b\xc1\xe3\x91\x43\x6f\x9d\x60\x05\x81\x42\xb7\x7b\xe8\xdd\xeb\x46\x08\x77\x34\xed\x9f\xda\xb9\xf6\x9f\xe9\xb4\xef\xfb\x50\x0c\x86\x43\x6d\xaa\xa9\x3c\xb4\xda\xe9\x6d\xbc\x58\x26\xd9\x72\x72\x1d\xce\x8e\x3f\xad\x95\x24\x6b\x61\xe8\x7b\xc7\x86\x4a\x6c\xf7\x10\x6d\x2b\xb9\x10\x5b\x49\x90\xa2\x87\x36\x10\x95\x21\x2a\xe1\xb4\x37\xdd\x1b\x76\xac\xaa\x00\x56\xef\x5c\x2f\x0c\x79\x9a\x92\xad\x33\xbc\xed\xdc\xd9\xcc\x4e\x16\xd9\x9e\x35\x68\x05\xa1\x30\x8e\x32\xc4\xd9\x18\xff\x45\x59\x9c\x05\x9e\xe4\x21\xce\xbf\xa4\xeb\x1c\x0f\xd1\x6a\x15\x25\x79\xbc\xcc\x90\xae\xb0\x48\x93\x9b\x38\x8f\xd3\x24\x43\xfa\x3f\xa2\xe4\x11\x5f\xe3\xe4\x26\x00\xb1\xab\xc9\x80\x9e\x5b\xe3\x13\x68\x03\xf6\xd3\xa4\x72\x18\x5d\x46\x74\x66\x61\xa7\x0f\x96\x6c\x4b\x05\xef\xb8\x80\x14\xaa\xea\x44\x45\xa8\xf4\x0f\x32\x8a\x55\x85\x96\x4c\xc3\xd6\x9f\xaa\x85\x50\xa5\xa7\x91\xdc\xb0\x13\x6e\xd8\xfa\x2d\x57\x38\x1a\x65\x79\xb4\xca\x91\xaf\xa2\x24\x8b\x16\xde\xe4\x7c\x34\x8a\x93\x6c\xb9\xca\x11\x27\x79\x8a\x4d\x67\xc9\xd8\x0d\x2e\x36\xd4\x08\x96\x9b\xe0\xb0\xa3\x44\x43\x7e\xbd\xeb\xa4\x1c\xd6\x97\xb8\x8f\x6e\xd7\xcb\x0c\x17\x63\x8f\x97\xd4\xe8\x7f\x9b\xbd\x65\x47\x36\xf4\xef\x71\x80\x17\xc0\xaf\xd7\x96\x0c\x6e\x7c\x71\x39\x3f\x17\xf4\xdd\x4f\x27\x55\xff\x7d\x3a\x09\x06\x18\xb0\x52\x37\x82\x55\x00\xa3\x25\xbd\x23\xeb\xd9\xdf\x2a\xcf\xbc\xca\x68\x91\xde\xdd\xc5\xf9\xfc\x53\x42\x8b\xe1\xfe\xbd\x1b\xfb\x17\xe4\xab\xc3\x45\xfd\xd8\xe8\xe7\x0a\x6f\xf5\xaf\x3e\x3d\xbc\xee\xd5\x1f\x8e\xfc\x05\xf1\x45\xea\x8b\x8f\x4d\x7e\xc6\xff\x56\xfc\xaf\xd7\xc1\x7f\x06\x00\x00\xff\xff\xc8\xe6\x6e\x5f\x39\x05\x00\x00")

func dataTestdataUsersSQLBytes() ([]byte, error) {
	return bindataRead(
		_dataTestdataUsersSQL,
		"data/testdata/users.sql",
	)
}

func dataTestdataUsersSQL() (*asset, error) {
	bytes, err := dataTestdataUsersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/testdata/users.sql", size: 1337, mode: os.FileMode(420), modTime: time.Unix(1558108563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/testdata/posts.sql": dataTestdataPostsSQL,
	"data/testdata/sites.sql": dataTestdataSitesSQL,
	"data/testdata/users.sql": dataTestdataUsersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"testdata": {nil, map[string]*bintree{
			"posts.sql": {dataTestdataPostsSQL, map[string]*bintree{}},
			"sites.sql": {dataTestdataSitesSQL, map[string]*bintree{}},
			"users.sql": {dataTestdataUsersSQL, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
