// Copyright 2019 Publr Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/server/sites/datastore/datastore.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/prksu/publr/pkg/api/sites/v1alpha2"
	reflect "reflect"
)

// MockSiteDatastore is a mock of SiteDatastore interface
type MockSiteDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockSiteDatastoreMockRecorder
}

// MockSiteDatastoreMockRecorder is the mock recorder for MockSiteDatastore
type MockSiteDatastoreMockRecorder struct {
	mock *MockSiteDatastore
}

// NewMockSiteDatastore creates a new mock instance
func NewMockSiteDatastore(ctrl *gomock.Controller) *MockSiteDatastore {
	mock := &MockSiteDatastore{ctrl: ctrl}
	mock.recorder = &MockSiteDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteDatastore) EXPECT() *MockSiteDatastoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSiteDatastore) Create(site *v1alpha2.Site) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", site)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSiteDatastoreMockRecorder) Create(site interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSiteDatastore)(nil).Create), site)
}

// Get mocks base method
func (m *MockSiteDatastore) Get(sitedomain string) (*v1alpha2.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", sitedomain)
	ret0, _ := ret[0].(*v1alpha2.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSiteDatastoreMockRecorder) Get(sitedomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSiteDatastore)(nil).Get), sitedomain)
}

// Delete mocks base method
func (m *MockSiteDatastore) Delete(sitedomain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sitedomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSiteDatastoreMockRecorder) Delete(sitedomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSiteDatastore)(nil).Delete), sitedomain)
}
