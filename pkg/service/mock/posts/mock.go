// Copyright 2019 Publr Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prksu/publr/pkg/api/posts/v1alpha1 (interfaces: PostServiceClient)

// Package posts is a generated GoMock package.
package posts

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha1 "github.com/prksu/publr/pkg/api/posts/v1alpha1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPostServiceClient is a mock of PostServiceClient interface
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// CreatePost mocks base method
func (m *MockPostServiceClient) CreatePost(arg0 context.Context, arg1 *v1alpha1.CreatePostRequest, arg2 ...grpc.CallOption) (*v1alpha1.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockPostServiceClientMockRecorder) CreatePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceClient)(nil).CreatePost), varargs...)
}

// DeletePost mocks base method
func (m *MockPostServiceClient) DeletePost(arg0 context.Context, arg1 *v1alpha1.DeletePostRequest, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockPostServiceClientMockRecorder) DeletePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// GetPost mocks base method
func (m *MockPostServiceClient) GetPost(arg0 context.Context, arg1 *v1alpha1.GetPostRequest, arg2 ...grpc.CallOption) (*v1alpha1.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockPostServiceClientMockRecorder) GetPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetPost), varargs...)
}

// ListPost mocks base method
func (m *MockPostServiceClient) ListPost(arg0 context.Context, arg1 *v1alpha1.ListPostRequest, arg2 ...grpc.CallOption) (*v1alpha1.PostList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPost", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PostList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPost indicates an expected call of ListPost
func (mr *MockPostServiceClientMockRecorder) ListPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPost", reflect.TypeOf((*MockPostServiceClient)(nil).ListPost), varargs...)
}

// SearchPost mocks base method
func (m *MockPostServiceClient) SearchPost(arg0 context.Context, arg1 *v1alpha1.SearchPostRequest, arg2 ...grpc.CallOption) (*v1alpha1.PostList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPost", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PostList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPost indicates an expected call of SearchPost
func (mr *MockPostServiceClientMockRecorder) SearchPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPost", reflect.TypeOf((*MockPostServiceClient)(nil).SearchPost), varargs...)
}

// UpdatePost mocks base method
func (m *MockPostServiceClient) UpdatePost(arg0 context.Context, arg1 *v1alpha1.UpdatePostRequest, arg2 ...grpc.CallOption) (*v1alpha1.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockPostServiceClientMockRecorder) UpdatePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}
