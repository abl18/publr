// Copyright 2019 Publr Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prksu/publr/pkg/api/sites/v1alpha3 (interfaces: SiteServiceClient)

// Package sites is a generated GoMock package.
package sites

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha3 "github.com/prksu/publr/pkg/api/sites/v1alpha3"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSiteServiceClient is a mock of SiteServiceClient interface
type MockSiteServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSiteServiceClientMockRecorder
}

// MockSiteServiceClientMockRecorder is the mock recorder for MockSiteServiceClient
type MockSiteServiceClientMockRecorder struct {
	mock *MockSiteServiceClient
}

// NewMockSiteServiceClient creates a new mock instance
func NewMockSiteServiceClient(ctrl *gomock.Controller) *MockSiteServiceClient {
	mock := &MockSiteServiceClient{ctrl: ctrl}
	mock.recorder = &MockSiteServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteServiceClient) EXPECT() *MockSiteServiceClientMockRecorder {
	return m.recorder
}

// CreateSite mocks base method
func (m *MockSiteServiceClient) CreateSite(arg0 context.Context, arg1 *v1alpha3.CreateSiteRequest, arg2 ...grpc.CallOption) (*v1alpha3.Site, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSite", varargs...)
	ret0, _ := ret[0].(*v1alpha3.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSite indicates an expected call of CreateSite
func (mr *MockSiteServiceClientMockRecorder) CreateSite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockSiteServiceClient)(nil).CreateSite), varargs...)
}

// DeleteSite mocks base method
func (m *MockSiteServiceClient) DeleteSite(arg0 context.Context, arg1 *v1alpha3.DeleteSiteRequest, arg2 ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSite", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSite indicates an expected call of DeleteSite
func (mr *MockSiteServiceClientMockRecorder) DeleteSite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockSiteServiceClient)(nil).DeleteSite), varargs...)
}

// GetSite mocks base method
func (m *MockSiteServiceClient) GetSite(arg0 context.Context, arg1 *v1alpha3.GetSiteRequest, arg2 ...grpc.CallOption) (*v1alpha3.Site, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSite", varargs...)
	ret0, _ := ret[0].(*v1alpha3.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite
func (mr *MockSiteServiceClientMockRecorder) GetSite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockSiteServiceClient)(nil).GetSite), varargs...)
}
