// Copyright 2019 Publr Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prksu/publr/service/users (interfaces: UserDatastore)

// Package mock_users is a generated GoMock package.
package mock_users

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/prksu/publr/pkg/api/users/v1alpha3"
	reflect "reflect"
)

// MockUserDatastore is a mock of UserDatastore interface
type MockUserDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatastoreMockRecorder
}

// MockUserDatastoreMockRecorder is the mock recorder for MockUserDatastore
type MockUserDatastoreMockRecorder struct {
	mock *MockUserDatastore
}

// NewMockUserDatastore creates a new mock instance
func NewMockUserDatastore(ctrl *gomock.Controller) *MockUserDatastore {
	mock := &MockUserDatastore{ctrl: ctrl}
	mock.recorder = &MockUserDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDatastore) EXPECT() *MockUserDatastoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserDatastore) Create(arg0 context.Context, arg1 string, arg2 *v1alpha3.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserDatastoreMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDatastore)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockUserDatastore) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserDatastoreMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDatastore)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockUserDatastore) Get(arg0 context.Context, arg1, arg2 string) (*v1alpha3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserDatastoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserDatastore)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockUserDatastore) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*v1alpha3.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*v1alpha3.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockUserDatastoreMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserDatastore)(nil).List), arg0, arg1, arg2, arg3)
}

// Search mocks base method
func (m *MockUserDatastore) Search(arg0 context.Context, arg1 string) ([]*v1alpha3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]*v1alpha3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockUserDatastoreMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUserDatastore)(nil).Search), arg0, arg1)
}

// Update mocks base method
func (m *MockUserDatastore) Update(arg0 context.Context, arg1, arg2 string, arg3 *v1alpha3.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserDatastoreMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDatastore)(nil).Update), arg0, arg1, arg2, arg3)
}
